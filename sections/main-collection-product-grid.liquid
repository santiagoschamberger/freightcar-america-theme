{{ 'template-collection.css' | asset_url | stylesheet_tag }}
{{ 'component-card.css' | asset_url | stylesheet_tag }}
{{ 'component-price.css' | asset_url | stylesheet_tag }}

{% if section.settings.image_shape == 'blob' %}
  {{ 'mask-blobs.css' | asset_url | stylesheet_tag }}
{%- endif -%}

{%- unless section.settings.quick_add == 'none' -%}
  {{ 'quick-add.css' | asset_url | stylesheet_tag }}
{%- endunless -%}

{%- if section.settings.quick_add == 'standard' -%}
  <script src="{{ 'quick-add.js' | asset_url }}" defer="defer"></script>
  <script src="{{ 'product-form.js' | asset_url }}" defer="defer"></script>
{%- endif -%}

{%- if section.settings.quick_add == 'bulk' -%}
  <script src="{{ 'quick-add-bulk.js' | asset_url }}" defer="defer"></script>
  <script src="{{ 'quantity-popover.js' | asset_url }}" defer="defer"></script>
  <script src="{{ 'price-per-item.js' | asset_url }}" defer="defer"></script>
  <script src="{{ 'quick-order-list.js' | asset_url }}" defer="defer"></script>
{%- endif -%}

{%- style -%}
  .section-{{ section.id }}-padding {
    padding-top: {{ section.settings.padding_top | times: 0.75 | round: 0 }}px;
    padding-bottom: {{ section.settings.padding_bottom | times: 0.75 | round: 0 }}px;
  }

  @media screen and (min-width: 750px) {
    .section-{{ section.id }}-padding {
      padding-top: {{ section.settings.padding_top }}px;
      padding-bottom: {{ section.settings.padding_bottom }}px;
    }
  }
{%- endstyle -%}


<div class="section-{{ section.id }}-padding gradient color-{{ section.settings.color_scheme }}">
  {%- paginate collection.products by section.settings.products_per_page -%}
    {% comment %} Sort is the first tabbable element when filter type is vertical {% endcomment %}
    {%- if section.settings.enable_sorting and section.settings.filter_type == 'vertical' -%}
      <facet-filters-form class="facets facets-vertical-sort page-width small-hide">
        <form class="facets-vertical-form" id="FacetSortForm">
          <div class="facet-filters sorting caption">
            <div class="facet-filters__field">
              <h2 class="facet-filters__label caption-large text-body">
                <label for="SortBy">{{ 'products.facets.sort_by_label' | t }}</label>
              </h2>
              <div class="select">
                {%- assign sort_by = collection.sort_by | default: collection.default_sort_by -%}
                <select
                  name="sort_by"
                  class="facet-filters__sort select__select caption-large"
                  id="SortBy"
                  aria-describedby="a11y-refresh-page-message"
                >
                  {%- for option in collection.sort_options -%}
                    <option
                      value="{{ option.value | escape }}"
                      {% if option.value == sort_by %}
                        selected="selected"
                      {% endif %}
                    >
                      {{ option.name | escape }}
                    </option>
                  {%- endfor -%}
                </select>
                <span class="svg-wrapper">
                  {{- 'icon-caret.svg' | inline_asset_content -}}
                </span>
              </div>
            </div>
          </div>

          <div class="product-count-vertical light" role="status">
            <h2 class="product-count__text text-body">
              <span id="ProductCountDesktop">
                {%- if collection.results_count -%}
                  {{
                    'templates.search.results_with_count'
                    | t: terms: collection.terms, count: collection.results_count
                  }}
                {%- elsif collection.products_count == collection.all_products_count -%}
                  {{ 'products.facets.product_count_simple' | t: count: collection.products_count }}
                {%- else -%}
                  {{
                    'products.facets.product_count'
                    | t: product_count: collection.products_count, count: collection.all_products_count
                  }}
                {%- endif -%}
              </span>
            </h2>
            {%- render 'loading-spinner' -%}
          </div>
        </form>
      </facet-filters-form>
    {%- endif -%}

    <div class="{% if section.settings.filter_type == 'vertical' %} facets-vertical page-width{% endif %}">
      {{ 'component-facets.css' | asset_url | stylesheet_tag }}
      <script src="{{ 'facets.js' | asset_url }}" defer="defer"></script>
      {%- if section.settings.enable_filtering or section.settings.enable_sorting -%}
        <aside
          aria-labelledby="verticalTitle"
          class="facets-wrapper{% unless section.settings.enable_filtering %} facets-wrapper--no-filters{% endunless %}{% if section.settings.filter_type != 'vertical' %} page-width{% endif %}"
          id="main-collection-filters"
          data-id="{{ section.id }}"
        >
          {% render 'facets',
            results: collection,
            enable_filtering: section.settings.enable_filtering,
            enable_sorting: section.settings.enable_sorting,
            filter_type: section.settings.filter_type,
            paginate: paginate
          %}
        </aside>
      {%- endif -%}

      <div
        class="product-grid-container{% if settings.animations_reveal_on_scroll %} scroll-trigger animate--slide-in{% endif %}"
        id="ProductGridContainer"
        {% if settings.animations_reveal_on_scroll %}
          data-cascade
        {% endif %}
      >
        {%- if collection.products.size == 0 -%}
          <div class="collection collection--empty page-width" id="product-grid" data-id="{{ section.id }}">
            <div class="loading-overlay gradient"></div>
            <div class="title-wrapper center">
              <h2 class="title title--primary">
                {{ 'sections.collection_template.empty' | t -}}
                <br>
                {{
                  'sections.collection_template.use_fewer_filters_html'
                  | t: link: collection.url, class: 'underlined-link link'
                }}
              </h2>
            </div>
          </div>
        {%- else -%}
          <div
            class="collection{% if section.settings.filter_type != 'vertical' %} page-width{% endif %}"
          >
            <div class="loading-overlay gradient"></div>
            {%- comment -%}
Hidden featured product HTML (server rendered). Put this BEFORE your <ul id="product-grid">.
Change collections['featured'] to your featured collection handle if different.
{%- endcomment -%}
<div id="featured-source" style="display:none;">
  {%- assign fc = collections['featured'] -%}
  {%- if fc and fc.products.size > 0 -%}
    {%- for p in fc.products -%}
      <div class="featured-source-item" data-featured-handle="{{ p.handle }}">
        {% render 'card-product',
          card_product: p,
          media_aspect_ratio: section.settings.image_ratio,
          image_shape: section.settings.image_shape,
          show_secondary_image: section.settings.show_secondary_image,
          show_vendor: section.settings.show_vendor,
          show_rating: section.settings.show_rating,
          lazy_load: false,
          skip_styles: false,
          quick_add: section.settings.quick_add,
          section_id: section.id
        %}
      </div>
    {%- endfor -%}
  {%- endif -%}
</div>

<script>
  // Expose variables for JS
  window.__COLLECTION_HANDLE = "{{ collection.handle }}";
  window.__PER_PAGE = {{ section.settings.products_per_page | default: 24 }};
  window.__FEATURED_HANDLE = "featured"; /* change if your featured collection handle is different */
  window.__CURRENT_PAGE = {{ paginate.current_page | default: 1 }};
</script>

            <ul
              id="product-grid"
              data-id="{{ section.id }}"
              class="
                grid product-grid grid--{{ section.settings.columns_mobile }}-col-tablet-down
                grid--{{ section.settings.columns_desktop }}-col-desktop
                {% if section.settings.quick_add == 'bulk' %} collection-quick-add-bulk{% endif %}
              "
            >
              {% assign skip_card_product_styles = false %}
              {%- for product in collection.products -%}
                {% assign lazy_load = false %}
                {%- if forloop.index > 2 -%}
                  {%- assign lazy_load = true -%}
                {%- endif -%}

                <li
                  class="grid__item{% if settings.animations_reveal_on_scroll %} scroll-trigger animate--slide-in{% endif %}"
                  {% if settings.animations_reveal_on_scroll %}
                    data-cascade
                    style="--animation-order: {{ forloop.index }};"
                  {% endif %}
                >
                  {% render 'card-product',
                    card_product: product,
                    media_aspect_ratio: section.settings.image_ratio,
                    image_shape: section.settings.image_shape,
                    show_secondary_image: section.settings.show_secondary_image,
                    show_vendor: section.settings.show_vendor,
                    show_rating: section.settings.show_rating,
                    lazy_load: lazy_load,
                    skip_styles: skip_card_product_styles,
                    quick_add: section.settings.quick_add,
                    section_id: section.id
                  %}
                </li>
                {%- assign skip_card_product_styles = true -%}
              {%- endfor -%}
               
            </ul>
 
            {%- if paginate.pages > 1 -%}
              {% render 'pagination', paginate: paginate, anchor: '' %}
            {%- endif -%}
          </div>
        {%- endif -%}
      </div>
    </div>
  {%- endpaginate -%}
  {% if section.settings.image_shape == 'arch' %}
    {{ 'mask-arch.svg' | inline_asset_content }}
  {%- endif -%}
</div>

{% schema %}
{
  "name": "t:sections.main-collection-product-grid.name",
  "class": "section",
  "settings": [
    {
      "type": "range",
      "id": "products_per_page",
      "min": 8,
      "max": 36,
      "step": 4,
      "default": 16,
      "label": "t:sections.main-collection-product-grid.settings.products_per_page.label"
    },
    {
      "type": "range",
      "id": "columns_desktop",
      "min": 1,
      "max": 6,
      "step": 1,
      "default": 4,
      "label": "t:sections.main-collection-product-grid.settings.columns_desktop.label"
    },
    {
      "type": "color_scheme",
      "id": "color_scheme",
      "label": "t:sections.all.colors.label",
      "info": "t:sections.all.colors.has_cards_info",
      "default": "scheme-1"
    },
    {
      "type": "header",
      "content": "t:sections.main-collection-product-grid.settings.header__3.content"
    },
    {
      "type": "select",
      "id": "image_ratio",
      "options": [
        {
          "value": "adapt",
          "label": "t:sections.main-collection-product-grid.settings.image_ratio.options__1.label"
        },
        {
          "value": "portrait",
          "label": "t:sections.main-collection-product-grid.settings.image_ratio.options__2.label"
        },
        {
          "value": "square",
          "label": "t:sections.main-collection-product-grid.settings.image_ratio.options__3.label"
        }
      ],
      "default": "adapt",
      "label": "t:sections.main-collection-product-grid.settings.image_ratio.label"
    },
    {
      "type": "select",
      "id": "image_shape",
      "options": [
        {
          "value": "default",
          "label": "t:sections.all.image_shape.options__1.label"
        },
        {
          "value": "arch",
          "label": "t:sections.all.image_shape.options__2.label"
        },
        {
          "value": "blob",
          "label": "t:sections.all.image_shape.options__3.label"
        },
        {
          "value": "chevronleft",
          "label": "t:sections.all.image_shape.options__4.label"
        },
        {
          "value": "chevronright",
          "label": "t:sections.all.image_shape.options__5.label"
        },
        {
          "value": "diamond",
          "label": "t:sections.all.image_shape.options__6.label"
        },
        {
          "value": "parallelogram",
          "label": "t:sections.all.image_shape.options__7.label"
        },
        {
          "value": "round",
          "label": "t:sections.all.image_shape.options__8.label"
        }
      ],
      "default": "default",
      "label": "t:sections.all.image_shape.label",
      "info": "t:sections.all.image_shape.info"
    },
    {
      "type": "checkbox",
      "id": "show_secondary_image",
      "default": false,
      "label": "t:sections.main-collection-product-grid.settings.show_secondary_image.label"
    },
    {
      "type": "checkbox",
      "id": "show_vendor",
      "default": false,
      "label": "t:sections.main-collection-product-grid.settings.show_vendor.label"
    },
    {
      "type": "checkbox",
      "id": "show_rating",
      "default": false,
      "label": "t:sections.main-collection-product-grid.settings.show_rating.label",
      "info": "t:sections.main-collection-product-grid.settings.show_rating.info"
    },
    {
      "type": "select",
      "id": "quick_add",
      "default": "none",
      "label": "t:sections.main-collection-product-grid.settings.quick_add.label",
      "info": "t:sections.main-collection-product-grid.settings.quick_add.info",
      "options": [
        {
          "value": "none",
          "label": "t:sections.main-collection-product-grid.settings.quick_add.options.option_1"
        },
        {
          "value": "standard",
          "label": "t:sections.main-collection-product-grid.settings.quick_add.options.option_2"
        },
        {
          "value": "bulk",
          "label": "t:sections.main-collection-product-grid.settings.quick_add.options.option_3"
        }
      ]
    },
    {
      "type": "header",
      "content": "t:sections.main-collection-product-grid.settings.header__1.content"
    },
    {
      "type": "checkbox",
      "id": "enable_filtering",
      "default": true,
      "label": "t:sections.main-collection-product-grid.settings.enable_filtering.label",
      "info": "t:sections.main-collection-product-grid.settings.enable_filtering.info"
    },
    {
      "type": "select",
      "id": "filter_type",
      "options": [
        {
          "value": "horizontal",
          "label": "t:sections.main-collection-product-grid.settings.filter_type.options__1.label"
        },
        {
          "value": "vertical",
          "label": "t:sections.main-collection-product-grid.settings.filter_type.options__2.label"
        },
        {
          "value": "drawer",
          "label": "t:sections.main-collection-product-grid.settings.filter_type.options__3.label"
        }
      ],
      "default": "horizontal",
      "label": "t:sections.main-collection-product-grid.settings.filter_type.label",
      "info": "t:sections.main-collection-product-grid.settings.filter_type.info"
    },
    {
      "type": "checkbox",
      "id": "enable_sorting",
      "default": true,
      "label": "t:sections.main-collection-product-grid.settings.enable_sorting.label"
    },
    {
      "type": "header",
      "content": "t:sections.main-collection-product-grid.settings.header_mobile.content"
    },
    {
      "type": "select",
      "id": "columns_mobile",
      "default": "2",
      "label": "t:sections.main-collection-product-grid.settings.columns_mobile.label",
      "options": [
        {
          "value": "1",
          "label": "t:sections.main-collection-product-grid.settings.columns_mobile.options__1.label"
        },
        {
          "value": "2",
          "label": "t:sections.main-collection-product-grid.settings.columns_mobile.options__2.label"
        }
      ]
    },
    {
      "type": "header",
      "content": "t:sections.all.padding.section_padding_heading"
    },
    {
      "type": "range",
      "id": "padding_top",
      "min": 0,
      "max": 100,
      "step": 4,
      "unit": "px",
      "label": "t:sections.all.padding.padding_top",
      "default": 36
    },
    {
      "type": "range",
      "id": "padding_bottom",
      "min": 0,
      "max": 100,
      "step": 4,
      "unit": "px",
      "label": "t:sections.all.padding.padding_bottom",
      "default": 36
    }
  ]
}
{% endschema %}
<script>
(function () {
  // Config from Liquid
  var collectionHandle = window.__COLLECTION_HANDLE || (window.location.pathname.match(/\/collections\/([^\/\?]+)/) || [null, null])[1];
  var perPage = parseInt(window.__PER_PAGE || 24, 10);
  var featuredHandle = window.__FEATURED_HANDLE || 'featured';
  var currentPage = parseInt(window.__CURRENT_PAGE || (new URLSearchParams(window.location.search).get('page') || 1), 10);

  var grid = document.getElementById('product-grid');
  if (!grid) return;

  var featuredSource = document.getElementById('featured-source');
  var featuredNodes = {};
  if (featuredSource) {
    Array.from(featuredSource.querySelectorAll('.featured-source-item')).forEach(function (el) {
      var h = el.getAttribute('data-featured-handle');
      if (h) featuredNodes[h] = el;
    });
  }

  function fetchCollectionProducts(handle, limit) {
    limit = limit || 250;
    var url = '/collections/' + handle + '/products.json?limit=' + limit;
    return fetch(url, { credentials: 'same-origin' })
      .then(function(resp) {
        if (!resp.ok) throw new Error('Fetch failed: ' + resp.status);
        return resp.json();
      })
      .then(function(json) {
        return json.products || [];
      })
      .catch(function(err) {
        console.error('Error fetching collection products for', handle, err);
        return [];
      });
  }

  function renderSimpleCard(product) {
    var a = product.handle ? '/products/' + product.handle : '#';
    var img = (product.images && product.images[0] && product.images[0].src) ? product.images[0].src : '';
    var price = (product.variants && product.variants[0]) ? (product.variants[0].price) : '';
    var li = document.createElement('li');
    li.className = 'grid__item';
    li.innerHTML = '\
      <a class="product-card" href="' + a + '">\
        <div class="product-card__media" style="min-height:120px;display:flex;align-items:center;justify-content:center;">' +
          (img ? '<img src="' + img + '" alt="' + (product.title || '') + '" style="max-width:100%;height:auto;">' : '') +
        '</div>\
        <div class="product-card__meta">\
          <h3 class="product-card__title">' + (product.title || '') + '</h3>\
          <div class="product-card__price">' + (price || '') + '</div>\
        </div>\
      </a>';
    return li;
  }

  Promise.all([
    fetchCollectionProducts(featuredHandle),
    fetchCollectionProducts(collectionHandle)
  ]).then(function(results) {
    var featuredProducts = results[0];
    var collectionProducts = results[1];

    // build map handle -> product JSON
    var productByHandle = {};
    collectionProducts.forEach(function(p) { if (p && p.handle) productByHandle[p.handle] = p; });
    featuredProducts.forEach(function(p) { if (p && p.handle && !productByHandle[p.handle]) productByHandle[p.handle] = p; });

    var mergedHandles = [];
    var seen = new Set();

    featuredProducts.forEach(function(p) {
      if (!p || !p.handle) return;
      if (!seen.has(p.handle)) { mergedHandles.push(p.handle); seen.add(p.handle); }
    });

    collectionProducts.forEach(function(p) {
      if (!p || !p.handle) return;
      if (!seen.has(p.handle)) { mergedHandles.push(p.handle); seen.add(p.handle); }
    });

    var total = mergedHandles.length;
    var totalPages = Math.max(1, Math.ceil(total / perPage));
    if (currentPage < 1) currentPage = 1;
    if (currentPage > totalPages) currentPage = totalPages;

    var start = (currentPage - 1) * perPage;
    var end = Math.min(start + perPage, total);
    var pageHandles = mergedHandles.slice(start, end);

    // build nodes
    var newNodes = [];
    pageHandles.forEach(function(handle) {
      if (featuredNodes[handle]) {
        var block = featuredNodes[handle].cloneNode(true);
        var innerCard = block.querySelector('.card-product, .product-card, .grid__item, .product-item') || block.firstElementChild;
        var li = document.createElement('li');
        li.className = 'grid__item';
        if (innerCard) li.innerHTML = innerCard.outerHTML;
        else li.innerHTML = block.innerHTML;
        newNodes.push(li);
      } else if (productByHandle[handle]) {
        newNodes.push(renderSimpleCard(productByHandle[handle]));
      } else {
        // try find existing li in DOM by anchor
        var found = null;
        Array.from(grid.querySelectorAll('li')).forEach(function(li) {
          var a = li.querySelector('a[href*="/products/"]');
          if (a) {
            var m = a.getAttribute('href').match(/\/products\/([^\/\?\#]+)/);
            if (m && m[1] === handle) found = li.cloneNode(true);
          }
        });
        if (found) newNodes.push(found);
        else newNodes.push(renderSimpleCard({ handle: handle, title: handle }));
      }
    });

    // replace grid contents
    grid.innerHTML = '';
    newNodes.forEach(function(n) { grid.appendChild(n); });

    // rebuild simple pagination to match merged product count
    function rebuildPagination() {
      var pagContainer = document.querySelector('[data-pagination], .pagination') || null;
      if (!pagContainer) return;
      var nav = document.createElement('nav');
      nav.className = 'pagination pagination--merged';
      var ul = document.createElement('ul');
      ul.style.listStyle = 'none';
      ul.style.display = 'flex';
      ul.style.gap = '8px';
      for (var i = 1; i <= totalPages; i++) {
        var li = document.createElement('li');
        var a = document.createElement('a');
        a.href = updateQueryStringParameter(window.location.href, 'page', i);
        a.textContent = i;
        if (i === currentPage) a.className = 'active';
        li.appendChild(a);
        ul.appendChild(li);
      }
      nav.appendChild(ul);
      pagContainer.innerHTML = '';
      pagContainer.appendChild(nav);
    }

    function updateQueryStringParameter(uri, key, value) {
      var re = new RegExp('([?&])' + key + '=.*?(&|$)', 'i');
      var separator = uri.indexOf('?') !== -1 ? '&' : '?';
      if (uri.match(re)) {
        return uri.replace(re, '$1' + key + '=' + value + '$2');
      } else {
        return uri + separator + key + '=' + value;
      }
    }

    rebuildPagination();

    // intercept pagination clicks on the new pagination, redirect to server URL (reliable)
    document.addEventListener('click', function (e) {
      var a = e.target.closest('a');
      if (!a) return;
      if (!a.href) return;
      var url = new URL(a.href, window.location.origin);
      if (url.pathname.indexOf('/collections/' + collectionHandle) !== -1 && url.searchParams.has('page')) {
        // go to server URL so server response (non-JS users) matches
        // For reliability we'll navigate to the URL (no SPA)
        e.preventDefault();
        window.location.href = a.href;
      }
    }, { passive: false });

  }).catch(function (err) {
    console.error('Merged collection error', err);
  });

})();
</script>
