{{ 'template-collection.css' | asset_url | stylesheet_tag }}
{{ 'component-card.css' | asset_url | stylesheet_tag }}
{{ 'component-price.css' | asset_url | stylesheet_tag }}

{% if section.settings.image_shape == 'blob' %}
  {{ 'mask-blobs.css' | asset_url | stylesheet_tag }}
{%- endif -%}

{%- unless section.settings.quick_add == 'none' -%}
  {{ 'quick-add.css' | asset_url | stylesheet_tag }}
{%- endunless -%}

{%- if section.settings.quick_add == 'standard' -%}
  <script src="{{ 'quick-add.js' | asset_url }}" defer="defer"></script>
  <script src="{{ 'product-form.js' | asset_url }}" defer="defer"></script>
{%- endif -%}

{%- if section.settings.quick_add == 'bulk' -%}
  <script src="{{ 'quick-add-bulk.js' | asset_url }}" defer="defer"></script>
  <script src="{{ 'quantity-popover.js' | asset_url }}" defer="defer"></script>
  <script src="{{ 'price-per-item.js' | asset_url }}" defer="defer"></script>
  <script src="{{ 'quick-order-list.js' | asset_url }}" defer="defer"></script>
{%- endif -%}

{%- style -%}
  .section-{{ section.id }}-padding {
    padding-top: {{ section.settings.padding_top | times: 0.75 | round: 0 }}px;
    padding-bottom: {{ section.settings.padding_bottom | times: 0.75 | round: 0 }}px;
  }

  @media screen and (min-width: 750px) {
    .section-{{ section.id }}-padding {
      padding-top: {{ section.settings.padding_top }}px;
      padding-bottom: {{ section.settings.padding_bottom }}px;
    }
  }
{%- endstyle -%}


<div class="section-{{ section.id }}-padding gradient color-{{ section.settings.color_scheme }}">
  {%- paginate collection.products by section.settings.products_per_page -%}
    {% comment %} Sort is the first tabbable element when filter type is vertical {% endcomment %}
    {%- if section.settings.enable_sorting and section.settings.filter_type == 'vertical' -%}
      <facet-filters-form class="facets facets-vertical-sort page-width small-hide">
        <form class="facets-vertical-form" id="FacetSortForm">
          <div class="facet-filters sorting caption">
            <div class="facet-filters__field">
              <h2 class="facet-filters__label caption-large text-body">
                <label for="SortBy">{{ 'products.facets.sort_by_label' | t }}</label>
              </h2>
              <div class="select">
                {%- assign sort_by = collection.sort_by | default: collection.default_sort_by -%}
                {%- comment -%}
                Check if manual sorting should trigger featured behavior
                {%- endcomment -%}
                {% if sort_by == 'manual' and collection.handle == 'frontpage' %}
                  {% assign sort_by = 'featured' %}
                {% endif %}
                <select
                  name="sort_by"
                  class="facet-filters__sort select__select caption-large"
                  id="SortBy"
                  aria-describedby="a11y-refresh-page-message"
                >
                  <option value="featured" {% if sort_by == 'featured' %}selected="selected"{% endif %}>
                    Featured
                  </option>
                  {%- for option in collection.sort_options -%}
                    <option
                      value="{{ option.value | escape }}"
                      {% if option.value == sort_by %}
                        selected="selected"
                      {% endif %}
                    >
                      {{ option.name | escape }}
                    </option>
                  {%- endfor -%}
                </select>
                <span class="svg-wrapper">
                  {{- 'icon-caret.svg' | inline_asset_content -}}
                </span>
              </div>
            </div>
          </div>

          <div class="product-count-vertical light" role="status">
            <h2 class="product-count__text text-body">
              <span id="ProductCountDesktop">
                {%- if collection.results_count -%}
                  {{
                    'templates.search.results_with_count'
                    | t: terms: collection.terms, count: collection.results_count
                  }}
                {%- elsif collection.products_count == collection.all_products_count -%}
                  {{ 'products.facets.product_count_simple' | t: count: collection.products_count }}
                {%- else -%}
                  {{
                    'products.facets.product_count'
                    | t: product_count: collection.products_count, count: collection.all_products_count
                  }}
                {%- endif -%}
              </span>
            </h2>
            {%- render 'loading-spinner' -%}
          </div>
        </form>
      </facet-filters-form>
    {%- endif -%}

    <div class="{% if section.settings.filter_type == 'vertical' %} facets-vertical page-width{% endif %}">
      {{ 'component-facets.css' | asset_url | stylesheet_tag }}
      <script src="{{ 'facets.js' | asset_url }}" defer="defer"></script>
      {%- if section.settings.enable_filtering or section.settings.enable_sorting -%}
        <aside
          aria-labelledby="verticalTitle"
          class="facets-wrapper{% unless section.settings.enable_filtering %} facets-wrapper--no-filters{% endunless %}{% if section.settings.filter_type != 'vertical' %} page-width{% endif %}"
          id="main-collection-filters"
          data-id="{{ section.id }}"
        >
          {% render 'facets',
            results: collection,
            enable_filtering: section.settings.enable_filtering,
            enable_sorting: section.settings.enable_sorting,
            filter_type: section.settings.filter_type,
            paginate: paginate
          %}
        </aside>
      {%- endif -%}

      <div
        class="product-grid-container{% if settings.animations_reveal_on_scroll %} scroll-trigger animate--slide-in{% endif %}"
        id="ProductGridContainer"
        {% if settings.animations_reveal_on_scroll %}
          data-cascade
        {% endif %}
      >
        {%- if collection.products.size == 0 -%}
          <div class="collection collection--empty page-width" id="product-grid" data-id="{{ section.id }}">
            <div class="loading-overlay gradient"></div>
            <div class="title-wrapper center">
              <h2 class="title title--primary">
                {{ 'sections.collection_template.empty' | t -}}
                <br>
                {{
                  'sections.collection_template.use_fewer_filters_html'
                  | t: link: collection.url, class: 'underlined-link link'
                }}
              </h2>
            </div>
          </div>
        {%- else -%}
          <div
            class="collection{% if section.settings.filter_type != 'vertical' %} page-width{% endif %}"
          >
            <div class="loading-overlay gradient"></div>
            <ul
              id="product-grid"
              data-id="{{ section.id }}"
              class="
                grid product-grid grid--{{ section.settings.columns_mobile }}-col-tablet-down
                grid--{{ section.settings.columns_desktop }}-col-desktop
                {% if section.settings.quick_add == 'bulk' %} collection-quick-add-bulk{% endif %}
              "
            >
              {% assign skip_card_product_styles = false %}

              {%- comment -%}
              Get featured collection for product identification
              {%- endcomment -%}
              {% assign featured_collection = collections['featured'] %}
              {%- if featured_collection -%}
                {% assign featured_product_ids = featured_collection.products | map: 'id' %}
              {%- endif -%}

              {%- for product in collection.products -%}
                {% assign lazy_load = false %}
                {%- if forloop.index > 2 -%}
                  {%- assign lazy_load = true -%}
                {%- endif -%}

                <li
                  class="grid__item{% if settings.animations_reveal_on_scroll %} scroll-trigger animate--slide-in{% endif %}"
                  {% if settings.animations_reveal_on_scroll %}
                    data-cascade
                    style="--animation-order: {{ forloop.index }};"
                  {% endif %}
                  data-product-id="{{ product.id }}"
                  {% if featured_collection and featured_product_ids contains product.id %}
                    data-is-featured="true"
                  {% endif %}
                >
                  {% render 'card-product',
                    card_product: product,
                    media_aspect_ratio: section.settings.image_ratio,
                    image_shape: section.settings.image_shape,
                    show_secondary_image: section.settings.show_secondary_image,
                    show_vendor: section.settings.show_vendor,
                    show_rating: section.settings.show_rating,
                    lazy_load: lazy_load,
                    skip_styles: skip_card_product_styles,
                    quick_add: section.settings.quick_add,
                    section_id: section.id
                  %}
                </li>
                {%- assign skip_card_product_styles = true -%}
              {%- endfor -%}
               
            </ul>
 
            {%- if paginate.pages > 1 -%}
              {% render 'pagination', paginate: paginate, anchor: '' %}
            {%- endif -%}
          </div>
        {%- endif -%}

        {%- comment -%}
        AJAX Featured Product Sorting Script with JSON API
        {%- endcomment -%}
        <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
        <script>
          document.addEventListener('DOMContentLoaded', function() {
            let currentSort = 'default';
            let originalProducts = null;
            let featuredProductsData = null;
            let currentCollectionProducts = null;
            let currentPage = 1;
            let productsPerPage = {{ section.settings.products_per_page }};

            // Store original products data
            function storeOriginalProducts() {
              if (!originalProducts) {
                const productItems = document.querySelectorAll('#product-grid .grid__item');
                originalProducts = Array.from(productItems).map(item => item.outerHTML);

                // Also store current collection products for merging
                currentCollectionProducts = [];
                productItems.forEach(item => {
                  const productId = item.dataset.productId;
                  if (productId) {
                    currentCollectionProducts.push(productId);
                  }
                });
              }
            }

            // Render complete product card from JSON data
            function renderProductFromJSON(product, index, isFeatured = false) {
              const lazy_load = index > 2;
              const animation_order = index + 1;
              const imageUrl = product.featured_image || product.images[0] || '';
              const price = product.price ? (product.price / 100).toFixed(2) : '0.00';
              const comparePrice = product.compare_at_price ? (product.compare_at_price / 100).toFixed(2) : '';

              return `
                <li class="grid__item{% if settings.animations_reveal_on_scroll %} scroll-trigger animate--slide-in{% endif %}"
                    {% if settings.animations_reveal_on_scroll %}
                      data-cascade
                      style="--animation-order: ${animation_order};"
                    {% endif %}
                    data-product-id="${product.id}"
                    ${isFeatured ? 'data-is-featured="true"' : ''}>

                  <div class="card-wrapper product-card-wrapper underline-links-hover">
                    <div class="card card--{{ section.settings.image_shape }}
                              card--text
                              {% if product.featured_media == null and section.settings.image_shape == 'arch' %} ratio{% endif %}
                              color-{{ section.settings.color_scheme }}
                              gradient"
                         style="--ratio-percent: 100%;">

                      <div class="card__inner color-{{ section.settings.color_scheme }} gradient ratio"
                           style="--ratio-percent: 133.33333333%;">
                        <div class="card__media">
                          <div class="media media--transparent media--hover-effect">
                            ${imageUrl ? `
                              <img srcset="${imageUrl}&width=165 165w,${imageUrl}&width=360 360w,${imageUrl}&width=533 533w,${imageUrl}&width=720 720w,${imageUrl}&width=940 940w,${imageUrl}&width=1066 1066w"
                                   src="${imageUrl}&width=533"
                                   sizes="(min-width: 1400px) 347px, (min-width: 990px) calc((100vw - 130px) / 4), (min-width: 750px) calc((100vw - 120px) / 3), calc((100vw - 35px) / 2)"
                                   alt="${product.title}"
                                   class="motion-reduce"
                                   ${lazy_load ? 'loading="lazy"' : ''}
                                   width="533"
                                   height="711">
                            ` : ''}
                          </div>
                        </div>
                      </div>

                      <div class="card__content">
                        <div class="card__information">
                          <h3 class="card__heading h5">
                            <a href="${product.url}" class="full-unstyled-link" aria-labelledby="title-${product.id}">
                              ${product.title}
                            </a>
                          </h3>
                          <div class="card-information">
                            {% if section.settings.show_vendor %}
                              <span class="visually-hidden">Vendor:</span>
                              <div class="caption-with-letter-spacing light">${product.vendor}</div>
                            {% endif %}
                            <div class="price">
                              <div class="price__container">
                                ${comparePrice && parseFloat(comparePrice) > parseFloat(price) ? `
                                  <div class="price__regular">
                                    <span class="visually-hidden">Regular price</span>
                                    <span class="price-item price-item--regular">$${comparePrice}</span>
                                  </div>
                                  <div class="price__sale">
                                    <span class="visually-hidden">Sale price</span>
                                    <span class="price-item price-item--sale price-item--last">$${price}</span>
                                    <span class="visually-hidden">Regular price</span>
                                  </div>
                                ` : `
                                  <div class="price__regular">
                                    <span class="visually-hidden">Regular price</span>
                                    <span class="price-item price-item--regular">$${price}</span>
                                  </div>
                                `}
                              </div>
                            </div>
                          </div>
                        </div>
                        ${isFeatured ? `
                          <div class="card__badge bottom left">
                            <span class="badge badge--bottom-left color-accent-2">Featured</span>
                          </div>
                        ` : ''}

                        {% unless section.settings.quick_add == 'none' %}
                          <div class="quick-add no-js-hidden">
                            <div class="quick-add__content global-settings-popup" id="QuickAdd-${product.id}">
                              <form action="/cart/add" id="quick-add-product-form-${product.id}" accept-charset="UTF-8" class="form" enctype="multipart/form-data" novalidate="novalidate" data-type="add-to-cart-form">
                                <input type="hidden" name="form_type" value="product">
                                <input type="hidden" name="utf8" value="✓">
                                <input type="hidden" name="id" value="${product.variants[0]?.id || ''}">
                                <button
                                  id="quick-add-product-${product.id}-submit"
                                  type="submit"
                                  name="add"
                                  class="quick-add__btn btn product-form__cart-submit"
                                  aria-haspopup="dialog"
                                  aria-labelledby="quick-add-product-${product.id}-submit title-${product.id}"
                                  data-product-url="${product.url}"
                                >
                                  <span>Add to cart</span>
                                  <div class="loading-overlay__spinner hidden">
                                    <svg
                                      aria-hidden="true"
                                      focusable="false"
                                      class="spinner"
                                      viewBox="0 0 66 66"
                                      xmlns="http://www.w3.org/2000/svg"
                                    >
                                      <circle class="path" fill="none" stroke-width="6" cx="33" cy="33" r="30"></circle>
                                    </svg>
                                  </div>
                                </button>
                              </form>
                            </div>
                          </div>
                        {% endunless %}
                      </div>
                    </div>
                  </div>
                </li>
              `;
            }

            // Better approach: Use the original DOM elements and just reorder them
            function createProductElement(product, originalElement, index, isFeatured = false) {
              if (originalElement) {
                // Clone the original element
                const clonedElement = originalElement.cloneNode(true);
                clonedElement.style.setProperty('--animation-order', index + 1);
                if (isFeatured) {
                  clonedElement.setAttribute('data-is-featured', 'true');
                  // Add featured badge if it doesn't exist
                  const badgeContainer = clonedElement.querySelector('.card__badge') || clonedElement.querySelector('.card__content');
                  if (badgeContainer && !clonedElement.querySelector('.badge--featured')) {
                    const featuredBadge = document.createElement('span');
                    featuredBadge.className = 'badge badge--bottom-left color-accent-2 badge--featured';
                    featuredBadge.textContent = 'Featured';
                    badgeContainer.appendChild(featuredBadge);
                  }
                }
                return clonedElement.outerHTML;
              }

              // Fallback to basic rendering if original element not found
              return renderProductFromJSON(product, index, isFeatured);
            }

            // Load featured products via AJAX
            function loadFeaturedProducts(callback) {
              if (featuredProductsData) {
                callback(featuredProductsData);
                return;
              }

              $.ajax({
                url: '/collections/featured/products.json?limit=250',
                type: 'GET',
                dataType: 'json',
                success: function(data) {
                  console.log("Featured products loaded:", data.products.length);
                  featuredProductsData = data.products;
                  callback(featuredProductsData);
                },
                error: function(err) {
                  console.error("Error loading featured products", err);
                  callback([]);
                }
              });
            }

            // Load current collection products via AJAX
            function loadCurrentCollectionProducts(callback) {
              const collectionHandle = '{{ collection.handle }}';
              const currentUrl = `/collections/${collectionHandle}/products.json?limit=250`;

              $.ajax({
                url: currentUrl,
                type: 'GET',
                dataType: 'json',
                success: function(data) {
                  console.log("Current collection products loaded:", data.products.length);
                  callback(data.products);
                },
                error: function(err) {
                  console.error("Error loading current collection products", err);
                  callback([]);
                }
              });
            }

            // Merge and render products with featured first
            function renderFeaturedSorting() {
              const productGrid = document.querySelector('#product-grid');
              if (!productGrid) return;

              storeOriginalProducts();

              // Show loading state
              productGrid.innerHTML = '<div class="loading-overlay gradient"></div>';

              loadFeaturedProducts(function(featuredProducts) {
                loadCurrentCollectionProducts(function(collectionProducts) {
                  // Create map of current collection products by ID
                  const collectionProductsMap = {};
                  collectionProducts.forEach(product => {
                    collectionProductsMap[product.id] = product;
                  });

                  // Get featured product IDs for quick lookup
                  const featuredProductIds = featuredProducts.map(p => p.id);

                  // Separate current collection products into featured and non-featured
                  const featuredInCollection = [];
                  const nonFeaturedInCollection = [];

                  collectionProducts.forEach(product => {
                    if (featuredProductIds.includes(product.id)) {
                      featuredInCollection.push(product);
                    } else {
                      nonFeaturedInCollection.push(product);
                    }
                  });

                  // Merge: featured first, then non-featured
                  const mergedProducts = [...featuredInCollection, ...nonFeaturedInCollection];

                  // Calculate pagination
                  const totalProducts = mergedProducts.length;
                  const startIndex = (currentPage - 1) * productsPerPage;
                  const endIndex = startIndex + productsPerPage;
                  const paginatedProducts = mergedProducts.slice(startIndex, endIndex);

                  // Render products
                  let productsHTML = '';
                  paginatedProducts.forEach((product, index) => {
                    const isFeatured = featuredProductIds.includes(product.id);

                    // Try to find original element first
                    const originalElement = document.querySelector(`[data-product-id="${product.id}"]`);
                    if (originalElement) {
                      productsHTML += createProductElement(product, originalElement, index, isFeatured);
                    } else {
                      // Render from JSON data with complete product information
                      productsHTML += renderProductFromJSON(product, index, isFeatured);
                    }
                  });

                  productGrid.innerHTML = productsHTML;
                  updateAnimationOrder();
                });
              });
            }

            // Restore original product order
            function restoreOriginalOrder() {
              const productGrid = document.querySelector('#product-grid');
              if (!productGrid || !originalProducts) return;

              productGrid.innerHTML = originalProducts.join('');
              updateAnimationOrder();
            }

            function updateAnimationOrder() {
              const items = document.querySelectorAll('#product-grid .grid__item');
              items.forEach((item, index) => {
                if (item.style) {
                  item.style.setProperty('--animation-order', index + 1);
                }
              });
            }

            // Handle sort dropdown changes
            function handleSortChange(selectElement) {
              const urlParams = new URLSearchParams(window.location.search);
              const currentSortParam = urlParams.get('sort_by');

              if (selectElement.value === 'featured' && currentSortParam === 'manual') {
                event.preventDefault();
                event.stopPropagation();

                currentSort = 'featured';
                renderFeaturedSorting();

                // Update all select dropdowns to show Featured
                const allSelects = document.querySelectorAll('select[name="sort_by"]');
                allSelects.forEach(select => {
                  if (select !== selectElement) {
                    select.value = 'featured';
                  }
                });

                return false;
              } else if (selectElement.value === 'featured' && currentSortParam !== 'manual') {
                // If Featured is selected but URL doesn't have sort_by=manual, redirect
                const newUrl = new URL(window.location);
                newUrl.searchParams.set('sort_by', 'manual');
                window.location.href = newUrl.toString();
                return false;
              } else {
                // Handle switching away from featured
                if (currentSort === 'featured') {
                  restoreOriginalOrder();
                  currentSort = 'default';
                }
                return true;
              }
            }

            // Attach event listeners
            const sortSelects = document.querySelectorAll('select[name="sort_by"]');
            sortSelects.forEach(select => {
              select.addEventListener('change', function(e) {
                handleSortChange(this);
              });
            });

            // Handle dynamically loaded facet forms
            document.addEventListener('change', function(e) {
              if (e.target && e.target.matches('select[name="sort_by"]') && !e.target.hasAttribute('data-featured-listener')) {
                e.target.setAttribute('data-featured-listener', 'true');
                handleSortChange(e.target);
              }
            });

            // Check URL parameters on page load
            const urlParams = new URLSearchParams(window.location.search);
            const sortParam = urlParams.get('sort_by');
            const collectionHandle = '{{ collection.handle }}';

            // Auto-trigger featured sorting only when sort_by=manual AND user selects Featured
            if (sortParam === 'manual' && collectionHandle === 'frontpage') {
              // Only auto-trigger if dropdown shows featured
              setTimeout(() => {
                const sortSelects = document.querySelectorAll('select[name="sort_by"]');
                const featuredSelected = Array.from(sortSelects).some(select => select.value === 'featured');

                if (featuredSelected) {
                  currentSort = 'featured';
                  renderFeaturedSorting();
                }
              }, 100);
            }

            // Handle pagination clicks when on featured sort
            document.addEventListener('click', function(e) {
              if (currentSort === 'featured' && e.target.closest('.pagination a')) {
                e.preventDefault();
                const pageLink = e.target.closest('a').href;
                const pageMatch = pageLink.match(/page=(\d+)/);
                if (pageMatch) {
                  currentPage = parseInt(pageMatch[1]);
                  renderFeaturedSorting();
                }
              }
            });
          });
        </script>
      </div>
    </div>
  {%- endpaginate -%}
  {% if section.settings.image_shape == 'arch' %}
    {{ 'mask-arch.svg' | inline_asset_content }}
  {%- endif -%}
</div>

{% schema %}
{
  "name": "t:sections.main-collection-product-grid.name",
  "class": "section",
  "settings": [
    {
      "type": "range",
      "id": "products_per_page",
      "min": 8,
      "max": 36,
      "step": 4,
      "default": 16,
      "label": "t:sections.main-collection-product-grid.settings.products_per_page.label"
    },
    {
      "type": "range",
      "id": "columns_desktop",
      "min": 1,
      "max": 6,
      "step": 1,
      "default": 4,
      "label": "t:sections.main-collection-product-grid.settings.columns_desktop.label"
    },
    {
      "type": "color_scheme",
      "id": "color_scheme",
      "label": "t:sections.all.colors.label",
      "info": "t:sections.all.colors.has_cards_info",
      "default": "scheme-1"
    },
    {
      "type": "header",
      "content": "t:sections.main-collection-product-grid.settings.header__3.content"
    },
    {
      "type": "select",
      "id": "image_ratio",
      "options": [
        {
          "value": "adapt",
          "label": "t:sections.main-collection-product-grid.settings.image_ratio.options__1.label"
        },
        {
          "value": "portrait",
          "label": "t:sections.main-collection-product-grid.settings.image_ratio.options__2.label"
        },
        {
          "value": "square",
          "label": "t:sections.main-collection-product-grid.settings.image_ratio.options__3.label"
        }
      ],
      "default": "adapt",
      "label": "t:sections.main-collection-product-grid.settings.image_ratio.label"
    },
    {
      "type": "select",
      "id": "image_shape",
      "options": [
        {
          "value": "default",
          "label": "t:sections.all.image_shape.options__1.label"
        },
        {
          "value": "arch",
          "label": "t:sections.all.image_shape.options__2.label"
        },
        {
          "value": "blob",
          "label": "t:sections.all.image_shape.options__3.label"
        },
        {
          "value": "chevronleft",
          "label": "t:sections.all.image_shape.options__4.label"
        },
        {
          "value": "chevronright",
          "label": "t:sections.all.image_shape.options__5.label"
        },
        {
          "value": "diamond",
          "label": "t:sections.all.image_shape.options__6.label"
        },
        {
          "value": "parallelogram",
          "label": "t:sections.all.image_shape.options__7.label"
        },
        {
          "value": "round",
          "label": "t:sections.all.image_shape.options__8.label"
        }
      ],
      "default": "default",
      "label": "t:sections.all.image_shape.label",
      "info": "t:sections.all.image_shape.info"
    },
    {
      "type": "checkbox",
      "id": "show_secondary_image",
      "default": false,
      "label": "t:sections.main-collection-product-grid.settings.show_secondary_image.label"
    },
    {
      "type": "checkbox",
      "id": "show_vendor",
      "default": false,
      "label": "t:sections.main-collection-product-grid.settings.show_vendor.label"
    },
    {
      "type": "checkbox",
      "id": "show_rating",
      "default": false,
      "label": "t:sections.main-collection-product-grid.settings.show_rating.label",
      "info": "t:sections.main-collection-product-grid.settings.show_rating.info"
    },
    {
      "type": "select",
      "id": "quick_add",
      "default": "none",
      "label": "t:sections.main-collection-product-grid.settings.quick_add.label",
      "info": "t:sections.main-collection-product-grid.settings.quick_add.info",
      "options": [
        {
          "value": "none",
          "label": "t:sections.main-collection-product-grid.settings.quick_add.options.option_1"
        },
        {
          "value": "standard",
          "label": "t:sections.main-collection-product-grid.settings.quick_add.options.option_2"
        },
        {
          "value": "bulk",
          "label": "t:sections.main-collection-product-grid.settings.quick_add.options.option_3"
        }
      ]
    },
    {
      "type": "header",
      "content": "t:sections.main-collection-product-grid.settings.header__1.content"
    },
    {
      "type": "checkbox",
      "id": "enable_filtering",
      "default": true,
      "label": "t:sections.main-collection-product-grid.settings.enable_filtering.label",
      "info": "t:sections.main-collection-product-grid.settings.enable_filtering.info"
    },
    {
      "type": "select",
      "id": "filter_type",
      "options": [
        {
          "value": "horizontal",
          "label": "t:sections.main-collection-product-grid.settings.filter_type.options__1.label"
        },
        {
          "value": "vertical",
          "label": "t:sections.main-collection-product-grid.settings.filter_type.options__2.label"
        },
        {
          "value": "drawer",
          "label": "t:sections.main-collection-product-grid.settings.filter_type.options__3.label"
        }
      ],
      "default": "horizontal",
      "label": "t:sections.main-collection-product-grid.settings.filter_type.label",
      "info": "t:sections.main-collection-product-grid.settings.filter_type.info"
    },
    {
      "type": "checkbox",
      "id": "enable_sorting",
      "default": true,
      "label": "t:sections.main-collection-product-grid.settings.enable_sorting.label"
    },
    {
      "type": "header",
      "content": "t:sections.main-collection-product-grid.settings.header_mobile.content"
    },
    {
      "type": "select",
      "id": "columns_mobile",
      "default": "2",
      "label": "t:sections.main-collection-product-grid.settings.columns_mobile.label",
      "options": [
        {
          "value": "1",
          "label": "t:sections.main-collection-product-grid.settings.columns_mobile.options__1.label"
        },
        {
          "value": "2",
          "label": "t:sections.main-collection-product-grid.settings.columns_mobile.options__2.label"
        }
      ]
    },
    {
      "type": "header",
      "content": "t:sections.all.padding.section_padding_heading"
    },
    {
      "type": "range",
      "id": "padding_top",
      "min": 0,
      "max": 100,
      "step": 4,
      "unit": "px",
      "label": "t:sections.all.padding.padding_top",
      "default": 36
    },
    {
      "type": "range",
      "id": "padding_bottom",
      "min": 0,
      "max": 100,
      "step": 4,
      "unit": "px",
      "label": "t:sections.all.padding.padding_bottom",
      "default": 36
    }
  ]
}
{% endschema %}
